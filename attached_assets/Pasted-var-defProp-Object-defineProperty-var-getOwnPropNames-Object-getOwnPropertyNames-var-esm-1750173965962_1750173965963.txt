var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  businessServices: () => businessServices,
  businesses: () => businesses,
  categories: () => categories,
  contactMessages: () => contactMessages,
  contentStrings: () => contentStrings,
  csvBusinessSchema: () => csvBusinessSchema,
  featuredRequests: () => featuredRequests,
  insertBusinessSchema: () => insertBusinessSchema,
  insertBusinessServiceSchema: () => insertBusinessServiceSchema,
  insertCategorySchema: () => insertCategorySchema,
  insertContactMessageSchema: () => insertContactMessageSchema,
  insertContentStringSchema: () => insertContentStringSchema,
  insertLeadSchema: () => insertLeadSchema,
  insertMenuItemSchema: () => insertMenuItemSchema,
  insertOwnershipClaimSchema: () => insertOwnershipClaimSchema,
  insertPageContentSchema: () => insertPageContentSchema,
  insertPageSchema: () => insertPageSchema,
  insertReviewSchema: () => insertReviewSchema,
  insertServiceSchema: () => insertServiceSchema,
  insertSiteSettingSchema: () => insertSiteSettingSchema,
  insertSocialMediaLinkSchema: () => insertSocialMediaLinkSchema,
  insertUserSchema: () => insertUserSchema,
  insertWebsiteFaqSchema: () => insertWebsiteFaqSchema,
  leads: () => leads,
  loginUserSchema: () => loginUserSchema,
  menuItems: () => menuItems,
  ownershipClaims: () => ownershipClaims,
  pageContent: () => pageContent,
  pages: () => pages,
  publicReviewSchema: () => publicReviewSchema,
  registerUserSchema: () => registerUserSchema,
  reviews: () => reviews,
  services: () => services,
  sessions: () => sessions,
  siteSettings: () => siteSettings,
  socialMediaLinks: () => socialMediaLinks,
  users: () => users,
  websiteFaq: () => websiteFaq
});
import { pgTable, varchar, text, timestamp, serial, integer, boolean, numeric, jsonb, index } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var sessions, users, categories, businesses, reviews, siteSettings, ownershipClaims, menuItems, pages, websiteFaq, contactMessages, services, businessServices, socialMediaLinks, pageContent, featuredRequests, insertUserSchema, loginUserSchema, registerUserSchema, insertCategorySchema, insertBusinessSchema, csvBusinessSchema, insertReviewSchema, publicReviewSchema, insertPageContentSchema, insertSiteSettingSchema, insertSocialMediaLinkSchema, insertOwnershipClaimSchema, insertMenuItemSchema, insertPageSchema, insertWebsiteFaqSchema, insertServiceSchema, insertBusinessServiceSchema, leads, insertLeadSchema, insertContactMessageSchema, contentStrings, insertContentStringSchema;
var init_schema = __esm({
  "shared/schema.ts"() {
    "use strict";
    sessions = pgTable("session", {
      sid: varchar("sid").primaryKey(),
      sess: jsonb("sess").notNull(),
      expire: timestamp("expire").notNull()
    });
    users = pgTable("users", {
      id: varchar("id").primaryKey(),
      email: varchar("email").notNull().unique(),
      password: text("password"),
      firstName: varchar("first_name"),
      lastName: varchar("last_name"),
      profileImageUrl: text("profile_image_url"),
      role: varchar("role").notNull().default("user"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    categories = pgTable("categories", {
      id: serial("id").primaryKey(),
      name: varchar("name").notNull().unique(),
      slug: varchar("slug").notNull().unique(),
      description: text("description"),
      icon: varchar("icon").notNull(),
      color: varchar("color").notNull(),
      createdAt: timestamp("created_at").defaultNow()
    });
    businesses = pgTable("businesses", {
      placeid: text("placeid").primaryKey(),
      title: text("title"),
      subtitle: text("subtitle"),
      description: text("description"),
      categoryname: text("categoryname"),
      categories: jsonb("categories"),
      price: text("price"),
      website: text("website"),
      phone: text("phone"),
      phoneunformatted: text("phoneunformatted"),
      menu: text("menu"),
      address: text("address"),
      neighborhood: text("neighborhood"),
      street: text("street"),
      city: text("city"),
      postalcode: text("postalcode"),
      state: text("state"),
      countrycode: text("countrycode"),
      lat: numeric("lat"),
      lng: numeric("lng"),
      pluscode: text("pluscode"),
      locatedin: text("locatedin"),
      fid: text("fid"),
      cid: text("cid"),
      kgmid: text("kgmid"),
      url: text("url"),
      searchpageurl: text("searchpageurl"),
      googlefoodurl: text("googlefoodurl"),
      claimthisbusiness: boolean("claimthisbusiness"),
      permanentlyclosed: boolean("permanentlyclosed"),
      temporarilyclosed: boolean("temporarilyclosed"),
      isadvertisement: boolean("isadvertisement"),
      featured: boolean("featured"),
      totalscore: numeric("totalscore"),
      reviewscount: integer("reviewscount"),
      reviewsdistribution: jsonb("reviewsdistribution"),
      reviewstags: jsonb("reviewstags"),
      reviews: jsonb("reviews"),
      imageurl: text("imageurl"),
      imagescount: integer("imagescount"),
      imagecategories: jsonb("imagecategories"),
      imageurls: jsonb("imageurls"),
      images: jsonb("images"),
      logo: jsonb("logo"),
      openinghours: jsonb("openinghours"),
      additionalopeninghours: jsonb("additionalopeninghours"),
      openinghoursbusinessconfirmationtext: text("openinghoursbusinessconfirmationtext"),
      additionalinfo: jsonb("additionalinfo"),
      amenities: jsonb("amenities"),
      accessibility: jsonb("accessibility"),
      planning: jsonb("planning"),
      reservetableurl: text("reservetableurl"),
      tablereservationlinks: jsonb("tablereservationlinks"),
      bookinglinks: jsonb("bookinglinks"),
      orderby: jsonb("orderby"),
      restaurantdata: jsonb("restaurantdata"),
      hotelads: jsonb("hotelads"),
      hotelstars: integer("hotelstars"),
      hoteldescription: text("hoteldescription"),
      checkindate: text("checkindate"),
      checkoutdate: text("checkoutdate"),
      similarhotelsnearby: jsonb("similarhotelsnearby"),
      hotelreviewsummary: jsonb("hotelreviewsummary"),
      peoplealsosearch: jsonb("peoplealsosearch"),
      placestags: jsonb("placestags"),
      gasprices: jsonb("gasprices"),
      questionsandanswers: jsonb("questionsandanswers"),
      updatesfromcustomers: jsonb("updatesfromcustomers"),
      ownerupdates: jsonb("ownerupdates"),
      webresults: jsonb("webresults"),
      leadsenrichment: jsonb("leadsenrichment"),
      userplacenote: text("userplacenote"),
      scrapedat: timestamp("scrapedat"),
      searchstring: text("searchstring"),
      language: text("language"),
      rank: integer("rank"),
      ownerid: text("ownerid").references(() => users.id),
      seotitle: text("seotitle"),
      slug: text("slug").notNull().unique(),
      seodescription: text("seodescription"),
      createdat: timestamp("createdat").defaultNow(),
      updatedat: timestamp("updatedat").defaultNow(),
      faq: jsonb("faq")
    });
    reviews = pgTable("reviews", {
      id: serial("id").primaryKey(),
      businessId: text("business_id").references(() => businesses.placeid),
      userId: varchar("user_id").references(() => users.id),
      authorName: text("author_name"),
      authorEmail: text("author_email"),
      rating: integer("rating").notNull(),
      title: text("title"),
      comment: text("comment"),
      status: text("status").default("pending"),
      // pending, approved, rejected
      adminNotes: text("admin_notes"),
      createdAt: timestamp("created_at").defaultNow(),
      reviewedAt: timestamp("reviewed_at"),
      reviewedBy: text("reviewed_by").references(() => users.id)
    });
    siteSettings = pgTable("site_settings", {
      id: serial("id").primaryKey(),
      key: varchar("key").notNull().unique(),
      value: text("value"),
      description: text("description"),
      category: varchar("category"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    ownershipClaims = pgTable("ownership_claims", {
      id: serial("id").primaryKey(),
      userId: text("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      businessId: text("business_id").notNull().references(() => businesses.placeid, { onDelete: "cascade" }),
      status: text("status").notNull().default("pending"),
      // pending, approved, rejected
      message: text("message"),
      // User's claim message
      adminMessage: text("admin_message"),
      // Admin's response message
      reviewedBy: text("reviewed_by").references(() => users.id),
      reviewedAt: timestamp("reviewed_at"),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    menuItems = pgTable("menu_items", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      url: text("url").notNull(),
      position: text("position").notNull(),
      // header, footer1, footer2
      order: integer("order").notNull().default(0),
      isActive: boolean("is_active").notNull().default(true),
      target: text("target").default("_self"),
      // _self, _blank
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    pages = pgTable("pages", {
      id: serial("id").primaryKey(),
      title: text("title").notNull(),
      slug: varchar("slug").notNull().unique(),
      content: text("content"),
      seoTitle: text("seo_title"),
      seoDescription: text("seo_description"),
      status: varchar("status").notNull().default("draft"),
      // draft, published
      authorId: varchar("author_id").notNull().references(() => users.id),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull(),
      publishedAt: timestamp("published_at")
    });
    websiteFaq = pgTable("website_faq", {
      id: serial("id").primaryKey(),
      question: text("question").notNull(),
      answer: text("answer").notNull(),
      category: varchar("category").notNull().default("general"),
      order: integer("order").notNull().default(0),
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    contactMessages = pgTable("contact_messages", {
      id: serial("id").primaryKey(),
      name: varchar("name").notNull(),
      email: varchar("email").notNull(),
      phone: varchar("phone"),
      subject: varchar("subject").notNull(),
      message: text("message").notNull(),
      status: varchar("status").notNull().default("unread"),
      // unread, read, replied, archived
      adminNotes: text("admin_notes"),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    services = pgTable("services", {
      id: serial("id").primaryKey(),
      name: varchar("name").notNull(),
      // Generic service name e.g. "Teeth Whitening"
      slug: varchar("slug").notNull().unique(),
      // URL-friendly version e.g. "teeth-whitening"
      description: text("description"),
      // Service description
      category: varchar("category"),
      // Service category for organization
      seoTitle: varchar("seo_title"),
      // SEO page title
      seoDescription: text("seo_description"),
      // SEO meta description
      content: text("content"),
      // Rich content for service page
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    businessServices = pgTable("business_services", {
      id: serial("id").primaryKey(),
      businessId: text("business_id").notNull().references(() => businesses.placeid, { onDelete: "cascade" }),
      serviceId: integer("service_id").notNull().references(() => services.id, { onDelete: "cascade" }),
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow().notNull()
    });
    socialMediaLinks = pgTable("social_media_links", {
      id: serial("id").primaryKey(),
      platform: varchar("platform").notNull().unique(),
      // facebook, twitter, instagram, linkedin, youtube, tiktok
      url: text("url").notNull(),
      iconClass: varchar("icon_class").notNull(),
      // Font Awesome class name
      displayName: varchar("display_name").notNull(),
      isActive: boolean("is_active").notNull().default(true),
      sortOrder: integer("sort_order").notNull().default(0),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    pageContent = pgTable("page_content", {
      id: serial("id").primaryKey(),
      pageKey: varchar("page_key").notNull().unique(),
      // e.g., "get-featured", "contact-us"
      title: varchar("title").notNull(),
      content: text("content").notNull(),
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    featuredRequests = pgTable("featured_requests", {
      id: serial("id").primaryKey(),
      businessId: text("business_id").notNull().references(() => businesses.placeid, { onDelete: "cascade" }),
      userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      status: varchar("status").notNull().default("pending"),
      // pending, approved, rejected
      message: text("message"),
      // User's request message
      adminMessage: text("admin_message"),
      // Admin's response message
      reviewedBy: varchar("reviewed_by").references(() => users.id),
      reviewedAt: timestamp("reviewed_at"),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    insertUserSchema = createInsertSchema(users).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    loginUserSchema = z.object({
      email: z.string().email(),
      password: z.string().min(6)
    });
    registerUserSchema = insertUserSchema.extend({
      confirmPassword: z.string()
    }).refine((data) => data.password === data.confirmPassword, {
      message: "Passwords don't match",
      path: ["confirmPassword"]
    });
    insertCategorySchema = createInsertSchema(categories).omit({
      id: true,
      createdAt: true
    });
    insertBusinessSchema = createInsertSchema(businesses).omit({
      createdat: true,
      updatedat: true
    });
    csvBusinessSchema = insertBusinessSchema.partial().extend({
      // Make placeid required for CSV import
      placeid: z.string().min(1)
    });
    insertReviewSchema = createInsertSchema(reviews).omit({
      id: true,
      createdAt: true,
      reviewedAt: true,
      reviewedBy: true
    });
    publicReviewSchema = z.object({
      reviewerName: z.string().min(1, "Name is required"),
      title: z.string().min(5, "Title must be at least 5 characters").max(100, "Title must be less than 100 characters"),
      rating: z.number().min(1).max(5),
      comment: z.string().min(10, "Review must be at least 10 characters")
    });
    insertPageContentSchema = createInsertSchema(pageContent).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertSiteSettingSchema = createInsertSchema(siteSettings).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertSocialMediaLinkSchema = createInsertSchema(socialMediaLinks).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertOwnershipClaimSchema = createInsertSchema(ownershipClaims).omit({
      id: true,
      createdAt: true,
      updatedAt: true,
      reviewedAt: true
    });
    insertMenuItemSchema = createInsertSchema(menuItems).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertPageSchema = createInsertSchema(pages).omit({
      id: true,
      createdAt: true,
      updatedAt: true,
      publishedAt: true
    });
    insertWebsiteFaqSchema = createInsertSchema(websiteFaq).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertServiceSchema = createInsertSchema(services).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertBusinessServiceSchema = createInsertSchema(businessServices).omit({
      id: true,
      createdAt: true
    });
    leads = pgTable("leads", {
      id: serial("id").primaryKey(),
      businessId: text("business_id").notNull().references(() => businesses.placeid),
      senderName: varchar("sender_name").notNull(),
      senderEmail: varchar("sender_email").notNull(),
      senderPhone: varchar("sender_phone"),
      message: text("message").notNull(),
      status: varchar("status").notNull().default("new"),
      // new, contacted, converted, closed
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    insertLeadSchema = createInsertSchema(leads).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertContactMessageSchema = createInsertSchema(contactMessages).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    contentStrings = pgTable("content_strings", {
      id: serial("id").primaryKey(),
      stringKey: varchar("string_key", { length: 255 }).notNull().unique(),
      defaultValue: text("default_value").notNull(),
      translations: jsonb("translations").default({}),
      category: varchar("category", { length: 100 }).notNull(),
      description: text("description"),
      isHtml: boolean("is_html").default(false),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => ({
      stringKeyIdx: index("idx_content_strings_key").on(table.stringKey),
      categoryIdx: index("idx_content_strings_category").on(table.category)
    }));
    insertContentStringSchema = createInsertSchema(contentStrings).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
  }
});

// server/db.ts
import { Pool, neonConfig } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
import ws from "ws";
var DATABASE_URL, pool, db;
var init_db = __esm({
  "server/db.ts"() {
    "use strict";
    init_schema();
    neonConfig.webSocketConstructor = ws;
    DATABASE_URL = "postgresql://repplit_owner:npg_qtLveA26UxGP@ep-proud-mountain-a85015ts-pooler.eastus2.azure.neon.tech/repplit?sslmode=require";
    if (!DATABASE_URL) {
      throw new Error("DATABASE_URL environment variable is not set");
    }
    console.log("Database URL being used:", DATABASE_URL.replace(/:[^@]*@/, ":***@"));
    pool = new Pool({ connectionString: DATABASE_URL });
    db = drizzle({ client: pool, schema: schema_exports });
  }
});

// server/services-setup.ts
var services_setup_exports = {};
__export(services_setup_exports, {
  setupServicesTables: () => setupServicesTables
});
import { sql as sql9 } from "drizzle-orm";
async function setupServicesTables() {
  try {
    await db.execute(sql9`
      CREATE TABLE IF NOT EXISTS services (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(255) UNIQUE NOT NULL,
        description TEXT,
        category VARCHAR(100),
        seo_title VARCHAR(255),
        seo_description TEXT,
        content TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    await db.execute(sql9`
      CREATE TABLE IF NOT EXISTS business_services (
        id SERIAL PRIMARY KEY,
        business_id VARCHAR(255) NOT NULL,
        service_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
        UNIQUE(business_id, service_id)
      )
    `);
    await db.execute(sql9`
      INSERT INTO services (name, slug, description, category, seo_title, seo_description, content, is_active)
      VALUES 
        ('Dental Cleaning', 'dental-cleaning', 'Professional dental cleaning and hygiene services', 'Preventive', 'Professional Dental Cleaning Services', 'Get your teeth professionally cleaned with our expert dental hygiene services. Book your appointment today.', '<h2>Professional Dental Cleaning</h2><p>Regular dental cleanings are essential for maintaining optimal oral health...</p>', true),
        ('Teeth Whitening', 'teeth-whitening', 'Professional teeth whitening treatments', 'Cosmetic', 'Professional Teeth Whitening', 'Brighten your smile with our professional teeth whitening treatments. Safe and effective results.', '<h2>Teeth Whitening Services</h2><p>Transform your smile with our professional whitening treatments...</p>', true),
        ('Root Canal Treatment', 'root-canal-treatment', 'Endodontic root canal therapy', 'Restorative', 'Root Canal Treatment', 'Expert root canal therapy to save your natural teeth. Pain-free procedures with modern techniques.', '<h2>Root Canal Treatment</h2><p>Our experienced endodontists provide comfortable root canal therapy...</p>', true),
        ('Dental Implants', 'dental-implants', 'Permanent tooth replacement solutions', 'Restorative', 'Dental Implants', 'Replace missing teeth permanently with our dental implant solutions. Natural-looking results.', '<h2>Dental Implants</h2><p>Restore your smile with permanent dental implant solutions...</p>', true),
        ('Orthodontics', 'orthodontics', 'Teeth straightening and alignment services', 'Orthodontic', 'Orthodontic Treatment', 'Straighten your teeth with braces or clear aligners. Expert orthodontic care for all ages.', '<h2>Orthodontic Services</h2><p>Achieve a perfect smile with our comprehensive orthodontic treatments...</p>', true)
      ON CONFLICT (slug) DO NOTHING
    `);
    console.log("Services tables created and sample data inserted successfully");
    return { success: true };
  } catch (error) {
    console.error("Error setting up services tables:", error);
    throw error;
  }
}
var init_services_setup = __esm({
  "server/services-setup.ts"() {
    "use strict";
    init_db();
  }
});

// server/services-database-setup.ts
var services_database_setup_exports = {};
__export(services_database_setup_exports, {
  setupServicesDatabase: () => setupServicesDatabase
});
import { Pool as Pool2 } from "@neondatabase/serverless";
async function setupServicesDatabase() {
  console.log("Setting up services database tables...");
  try {
    const tableCheck = await pool2.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('services', 'business_services')
    `);
    console.log("Existing tables:", tableCheck.rows);
    await pool2.query(`
      CREATE TABLE IF NOT EXISTS services (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(255) UNIQUE NOT NULL,
        description TEXT,
        category VARCHAR(100),
        seo_title VARCHAR(255),
        seo_description TEXT,
        content TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    await pool2.query(`
      CREATE TABLE IF NOT EXISTS business_services (
        id SERIAL PRIMARY KEY,
        business_id VARCHAR(255) NOT NULL,
        service_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(business_id, service_id)
      )
    `);
    try {
      await pool2.query(`
        ALTER TABLE business_services 
        ADD CONSTRAINT fk_business_services_business 
        FOREIGN KEY (business_id) REFERENCES businesses(placeid) ON DELETE CASCADE
      `);
    } catch (e) {
      console.log("Foreign key constraint already exists or businesses table not found");
    }
    try {
      await pool2.query(`
        ALTER TABLE business_services 
        ADD CONSTRAINT fk_business_services_service 
        FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE
      `);
    } catch (e) {
      console.log("Foreign key constraint already exists");
    }
    await pool2.query(`CREATE INDEX IF NOT EXISTS idx_services_slug ON services(slug)`);
    await pool2.query(`CREATE INDEX IF NOT EXISTS idx_services_category ON services(category)`);
    await pool2.query(`CREATE INDEX IF NOT EXISTS idx_services_active ON services(is_active)`);
    await pool2.query(`CREATE INDEX IF NOT EXISTS idx_business_services_business_id ON business_services(business_id)`);
    await pool2.query(`CREATE INDEX IF NOT EXISTS idx_business_services_service_id ON business_services(service_id)`);
    await pool2.query(`
      INSERT INTO services (name, slug, description, category, seo_title, seo_description, content, is_active)
      VALUES 
        ('General Dentistry', 'general-dentistry', 'Comprehensive dental care including cleanings, exams, and preventive treatments.', 'General', 'General Dentistry Services - Comprehensive Dental Care', 'Professional general dentistry services including routine cleanings, dental exams, fillings, and preventive care to maintain optimal oral health.', 'Our general dentistry services provide comprehensive oral healthcare to patients of all ages. We focus on preventive care to help you maintain healthy teeth and gums for life.', true),
        ('Cosmetic Dentistry', 'cosmetic-dentistry', 'Enhance your smile with professional cosmetic dental treatments.', 'Cosmetic', 'Cosmetic Dentistry - Professional Smile Enhancement', 'Transform your smile with our cosmetic dentistry services including teeth whitening, veneers, and smile makeovers by experienced dental professionals.', 'Our cosmetic dentistry services are designed to enhance the beauty of your smile while maintaining optimal oral health. We use the latest techniques and materials.', true),
        ('Dental Implants', 'dental-implants', 'Permanent tooth replacement solutions with dental implants.', 'Restorative', 'Dental Implants - Permanent Tooth Replacement Solutions', 'Replace missing teeth with natural-looking dental implants. Our experienced team provides comprehensive implant dentistry services.', 'Dental implants provide a permanent solution for missing teeth, offering the look, feel, and function of natural teeth with long-lasting results.', true),
        ('Orthodontics', 'orthodontics', 'Straighten your teeth with braces and clear aligners.', 'Orthodontic', 'Orthodontics - Braces and Clear Aligners', 'Achieve a straighter smile with our orthodontic treatments including traditional braces, clear aligners, and Invisalign.', 'Our orthodontic services help patients of all ages achieve straighter, healthier smiles through various treatment options tailored to individual needs.', true),
        ('Root Canal Therapy', 'root-canal-therapy', 'Save your natural teeth with professional root canal treatment.', 'Endodontic', 'Root Canal Therapy - Save Your Natural Teeth', 'Professional root canal therapy to save infected or damaged teeth. Our gentle approach ensures comfortable treatment and successful outcomes.', 'Root canal therapy allows us to save natural teeth that have become infected or severely damaged, providing pain relief and preserving your smile.', true),
        ('Teeth Whitening', 'teeth-whitening', 'Professional teeth whitening for a brighter, whiter smile.', 'Cosmetic', 'Professional Teeth Whitening - Brighter Smile', 'Achieve a brighter, whiter smile with our professional teeth whitening treatments. Safe, effective, and long-lasting results.', 'Our professional teeth whitening treatments can safely and effectively brighten your smile, removing stains and discoloration for dramatic results.', true)
      ON CONFLICT (slug) DO NOTHING
    `);
    const finalCheck = await pool2.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('services', 'business_services')
    `);
    console.log("Final table check:", finalCheck.rows);
    const servicesCount = await pool2.query("SELECT COUNT(*) FROM services");
    console.log("Services count:", servicesCount.rows[0].count);
    console.log("Services database setup completed successfully!");
    return { success: true, tables: finalCheck.rows, servicesCount: servicesCount.rows[0].count };
  } catch (error) {
    console.error("Error setting up services database:", error);
    return { success: false, error: error.message };
  } finally {
    await pool2.end();
  }
}
var pool2;
var init_services_database_setup = __esm({
  "server/services-database-setup.ts"() {
    "use strict";
    pool2 = new Pool2({ connectionString: process.env.DATABASE_URL });
  }
});

// server/verify-services-setup.ts
var verify_services_setup_exports = {};
__export(verify_services_setup_exports, {
  verifyServicesSetup: () => verifyServicesSetup
});
import { Pool as Pool3 } from "@neondatabase/serverless";
async function verifyServicesSetup() {
  const pool3 = new Pool3({ connectionString: process.env.DATABASE_URL });
  try {
    console.log("Verifying services database setup...");
    const tablesQuery = `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('services', 'business_services')
      ORDER BY table_name
    `;
    const tablesResult = await pool3.query(tablesQuery);
    console.log("Found tables:", tablesResult.rows);
    if (tablesResult.rows.some((row) => row.table_name === "services")) {
      const countQuery = "SELECT COUNT(*) as count FROM services";
      const countResult = await pool3.query(countQuery);
      console.log("Services count:", countResult.rows[0].count);
      const sampleQuery = "SELECT id, name, slug FROM services LIMIT 3";
      const sampleResult = await pool3.query(sampleQuery);
      console.log("Sample services:", sampleResult.rows);
      return {
        success: true,
        tablesExist: true,
        servicesCount: parseInt(countResult.rows[0].count),
        sampleServices: sampleResult.rows
      };
    } else {
      return {
        success: true,
        tablesExist: false,
        message: "Services tables do not exist"
      };
    }
  } catch (error) {
    console.error("Error verifying services setup:", error);
    return { success: false, error: error.message };
  } finally {
    await pool3.end();
  }
}
var init_verify_services_setup = __esm({
  "server/verify-services-setup.ts"() {
    "use strict";
  }
});

// server/index.ts
import express2 from "express";
import session3 from "express-session";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import cors from "cors";

// server/routes.ts
import { createServer } from "http";