{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "react", "react-hooks", "jsx-a11y"],
  "rules": {
    // Import/Export consistency
    "prefer-const": "error",
    "no-var": "error",
    
    // Component naming
    "react/jsx-pascal-case": "error",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "function-declaration",
        "unnamedComponents": "arrow-function"
      }
    ],
    
    // Export patterns
    "import/prefer-default-export": "off",
    "import/no-default-export": "off",
    
    // Code organization
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "noSortAlphabetically": false
      }
    ],
    
    // Hooks consistency
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    
    // TypeScript consistency
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/prefer-interface": "off",
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    
    // Formatting consistency
    "indent": ["error", 2],
    "quotes": ["error", "double"],
    "semi": ["error", "always"],
    "comma-dangle": ["error", "always-multiline"],
    "object-curly-spacing": ["error", "always"],
    "array-bracket-spacing": ["error", "never"],
    
    // Component structure
    "react/jsx-max-props-per-line": ["error", { "maximum": 3 }],
    "react/jsx-closing-bracket-location": ["error", "tag-aligned"],
    "react/jsx-indent": ["error", 2],
    "react/jsx-indent-props": ["error", 2],
    
    // Naming conventions
    "camelcase": ["error", { "properties": "never" }],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "suffix": ["Props", "State", "Config", "Options"]
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      }
    ],

    // Design System Enforcement Rules
    "no-restricted-syntax": [
      "error",
      {
        "selector": "Literal[value=/^#[0-9a-fA-F]{3,8}$/]",
        "message": "Hardcoded hex colors are not allowed. Use CSS variables from the theme file instead (e.g., hsl(var(--primary)))"
      },
      {
        "selector": "CallExpression[callee.name='rgb'] Literal",
        "message": "Hardcoded RGB colors are not allowed. Use CSS variables from the theme file instead"
      },
      {
        "selector": "CallExpression[callee.name='rgba'] Literal", 
        "message": "Hardcoded RGBA colors are not allowed. Use CSS variables from the theme file instead"
      },
      {
        "selector": "Property[key.name='color'] Literal[value=/^#[0-9a-fA-F]{3,8}$/]",
        "message": "Hardcoded hex colors in CSS-in-JS are not allowed. Use theme colors instead"
      }
    ],

    // React/JSX rules
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",

    // Accessibility enforcement
    "jsx-a11y/alt-text": "error",
    "jsx-a11y/aria-props": "error", 
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/aria-unsupported-elements": "error",
    "jsx-a11y/role-has-required-aria-props": "error",
    "jsx-a11y/role-supports-aria-props": "error",
    "jsx-a11y/click-events-have-key-events": "error",
    "jsx-a11y/no-static-element-interactions": "error"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}