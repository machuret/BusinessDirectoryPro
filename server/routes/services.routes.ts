import { Router } from "express";
import { storage } from "../storage";

const router = Router();

// Services Setup Route
router.post("/admin/services/setup", async (req, res) => {
  try {
    const { setupServicesTables } = await import("../services-setup");
    await setupServicesTables();
    res.json({ message: "Services tables created successfully" });
  } catch (error) {
    console.error("Error setting up services:", error);
    res.status(500).json({ message: "Failed to setup services tables" });
  }
});

// Services Management Routes - AI-powered service generation
router.get("/admin/services", async (req, res) => {
  try {
    // Return empty array for now - services will be generated by AI based on business categories
    res.json([]);
  } catch (error) {
    console.error("Error fetching services:", error);
    res.json([]);
  }
});

// Generate services from existing businesses using AI
router.post("/admin/services/generate", async (req, res) => {
  try {
    // Get all businesses to analyze their categories and types
    const businesses = await storage.getBusinesses({ 
      limit: 100 
    });
    
    if (businesses.length === 0) {
      return res.status(400).json({ message: "No businesses found to analyze for service generation" });
    }
    
    // Extract unique categories and business types
    const categories = Array.from(new Set(businesses.map(b => b.category).filter(Boolean)));
    const businessTypes = Array.from(new Set(businesses.map(b => b.title).filter(Boolean)));
    
    // Use OpenAI to generate relevant services based on actual business data
    const prompt = `Based on these actual business categories and types from a directory:
    
Categories: ${categories.join(', ')}
Sample Business Types: ${businessTypes.slice(0, 20).join(', ')}

Generate 8-12 relevant professional services that these businesses typically offer. For each service, provide:
1. name (concise, professional)
2. slug (URL-friendly)
3. description (1-2 sentences)
4. category (group similar services)
5. seo_title (SEO optimized title)
6. seo_description (compelling meta description)
7. content (2-3 paragraphs of detailed content)

Respond with JSON format: {"services": [array of service objects]}. Make services relevant to the actual business types found.`;

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        response_format: { type: "json_object" },
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const aiResult = await openaiResponse.json();
    const generatedServices = JSON.parse(aiResult.choices[0].message.content);

    res.json({
      success: true,
      services: generatedServices.services || generatedServices,
      businessesAnalyzed: businesses.length,
      categoriesFound: categories.length
    });

  } catch (error) {
    console.error("Error generating services:", error);
    res.status(500).json({ message: "Failed to generate services using AI" });
  }
});

router.post("/admin/services", async (req, res) => {
  try {
    const service = await storage.createService(req.body);
    res.status(201).json(service);
  } catch (error) {
    console.error("Error creating service:", error);
    res.status(500).json({ message: "Failed to create service" });
  }
});

router.put("/admin/services/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const service = await storage.updateService(id, req.body);
    if (!service) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.json(service);
  } catch (error) {
    console.error("Error updating service:", error);
    res.status(500).json({ message: "Failed to update service" });
  }
});

router.delete("/admin/services/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const deleted = await storage.deleteService(id);
    if (!deleted) {
      return res.status(404).json({ message: "Service not found" });
    }
    res.json({ message: "Service deleted successfully" });
  } catch (error) {
    console.error("Error deleting service:", error);
    res.status(500).json({ message: "Failed to delete service" });
  }
});

// Setup services tables endpoint
router.post("/admin/setup-services", async (req, res) => {
  try {
    const { setupServicesDatabase } = await import("../services-database-setup");
    const result = await setupServicesDatabase();
    if (result.success) {
      res.json({ success: true, message: "Services database setup completed", data: result });
    } else {
      res.status(500).json({ error: result.error });
    }
  } catch (error: any) {
    console.error("Error setting up services database:", error);
    res.status(500).json({ error: error.message });
  }
});

// Verify services setup endpoint
router.get("/admin/verify-services", async (req, res) => {
  try {
    const { verifyServicesSetup } = await import("../verify-services-setup");
    const result = await verifyServicesSetup();
    res.json(result);
  } catch (error: any) {
    console.error("Error verifying services setup:", error);
    res.status(500).json({ error: error.message });
  }
});

export default router;